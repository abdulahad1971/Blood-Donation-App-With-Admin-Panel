package com.abdulahad.blooddonationapp.screen;

import android.app.ProgressDialog;
import android.content.Intent;
import android.graphics.Bitmap;
import android.net.Uri;
import android.os.Bundle;
import android.provider.MediaStore;
import android.util.Log;
import android.view.Window;
import android.view.WindowManager;
import android.widget.ArrayAdapter;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.Spinner;
import android.widget.Toast;

import androidx.activity.EdgeToEdge;
import androidx.appcompat.app.AlertDialog;
import androidx.appcompat.app.AppCompatActivity;
import androidx.core.graphics.Insets;
import androidx.core.view.ViewCompat;
import androidx.core.view.WindowInsetsCompat;

import com.abdulahad.blooddonationapp.R;
import com.abdulahad.blooddonationapp.utils.SessionManager;
import com.abdulahad.blooddonationapp.utils.Urls;
import com.android.volley.NetworkResponse;
import com.android.volley.Request;
import com.android.volley.toolbox.StringRequest;
import com.android.volley.toolbox.Volley;
import com.github.dhaval2404.imagepicker.ImagePicker;

import org.json.JSONException;
import org.json.JSONObject;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DonorRequest extends AppCompatActivity {

    private ImageView profileImage, editIcon;
    private Uri selectedImageUri;
    private EditText editName, editPhone, editAddress, editplm;
    private Spinner spinnerBloodGroup, spinnerDistrict;
    private SessionManager sessionManager;
    private Button btnSubmit;

    private ProgressDialog progressDialog;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        EdgeToEdge.enable(this);
        setContentView(R.layout.activity_donor_request);
        ViewCompat.setOnApplyWindowInsetsListener(findViewById(R.id.main), (v, insets) -> {
            Insets systemBars = insets.getInsets(WindowInsetsCompat.Type.systemBars());
            v.setPadding(systemBars.left, systemBars.top, systemBars.right, systemBars.bottom);
            return insets;
        });

        sessionManager = new SessionManager(this);

        profileImage = findViewById(R.id.profile_image);
        editIcon = findViewById(R.id.edit_icon);
        editName = findViewById(R.id.editName);
        editPhone = findViewById(R.id.editPhone);
        editAddress = findViewById(R.id.editAddress);
        spinnerBloodGroup = findViewById(R.id.spinnerBloodGroup);
        spinnerDistrict = findViewById(R.id.spinnerDistrict);
        editplm = findViewById(R.id.editplm);
        btnSubmit = findViewById(R.id.btn);

        // ProgressDialog Initialize
        progressDialog = new ProgressDialog(this);
        progressDialog.setMessage("ржжрзЯрж╛ ржХрж░рзЗ ржЕржкрзЗржХрзНрж╖рж╛ ржХрж░рзБржи...");
        progressDialog.setCancelable(false);

        // Status Bar color
        Window window = this.getWindow();
        window.addFlags(WindowManager.LayoutParams.FLAG_DRAWS_SYSTEM_BAR_BACKGROUNDS);
        window.clearFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS);
        window.setStatusBarColor(getResources().getColor(R.color.red));
        window.setNavigationBarColor(getResources().getColor(R.color.red));


        ImageView backButton = findViewById(R.id.backButton);
        backButton.setOnClickListener(v -> finish());

        // Spinner Data
        List<String> bloodGroups = Arrays.asList("ржП ржкржЬрж┐ржЯрж┐ржн (A+)", "ржП ржирзЗржЧрзЗржЯрж┐ржн (A-)", "ржмрж┐ ржкржЬрж┐ржЯрж┐ржн (B+)", "ржмрж┐ ржирзЗржЧрзЗржЯрж┐ржн (B-)",
                "ржПржмрж┐ ржкржЬрж┐ржЯрж┐ржн (AB+)", "ржПржмрж┐ ржирзЗржЧрзЗржЯрж┐ржн (AB-)", "ржУ ржкржЬрж┐ржЯрж┐ржн (O+)", "ржУ ржирзЗржЧрзЗржЯрж┐ржн (O-)");
        ArrayAdapter<String> bloodAdapter = new ArrayAdapter<>(this, R.layout.custom_spinner_blood_item, R.id.spinner_text, bloodGroups);
        spinnerBloodGroup.setAdapter(bloodAdapter);

        List<String> districts = Arrays.asList("ржврж╛ржХрж╛", "ржЧрж╛ржЬрзАржкрзБрж░", "ржирж╛рж░рж╛рзЯржгржЧржЮрзНржЬ", "ржЯрж╛ржЩрзНржЧрж╛ржЗрж▓", "ржХрж┐рж╢рзЛрж░ржЧржЮрзНржЬ", "ржорж╛ржирж┐ржХржЧржЮрзНржЬ", "ржорзЯржоржирж╕рж┐ржВрж╣", "ржЬрж╛ржорж╛рж▓ржкрзБрж░",
                "ржирзЗрждрзНрж░ржХрзЛржирж╛", "рж╢рзЗрж░ржкрзБрж░", "ржирж░рж╕рж┐ржВржжрзА", "рж░рж╛ржЬржмрж╛рзЬрзА", "ржлрж░рж┐ржжржкрзБрж░", "ржЧрзЛржкрж╛рж▓ржЧржЮрзНржЬ", "ржорж╛ржжрж╛рж░рзАржкрзБрж░", "рж╢рж░рзАрзЯрждржкрзБрж░",
                "ржЦрзБрж▓ржирж╛", "ржпрж╢рзЛрж░", "рж╕рж╛рждржХрзНрж╖рзАрж░рж╛", "ржЭрж┐ржирж╛ржЗржжрж╣", "ржЪрзБрзЯрж╛ржбрж╛ржЩрзНржЧрж╛", "ржорзЗрж╣рзЗрж░ржкрзБрж░", "ржирзЬрж╛ржЗрж▓", "ржмрж╛ржЧрзЗрж░рж╣рж╛ржЯ",
                "ржХрзБрж╖рзНржЯрж┐рзЯрж╛", "ржмрж░рж┐рж╢рж╛рж▓", "ржкржЯрзБрзЯрж╛ржЦрж╛рж▓рзА", "ржнрзЛрж▓рж╛", "ржмрж░ржЧрзБржирж╛", "ржЭрж╛рж▓ржХрж╛ржарж┐", "ржкрж┐рж░рзЛржЬржкрзБрж░",
                "ржЪржЯрзНржЯржЧрзНрж░рж╛ржо", "ржХржХрзНрж╕ржмрж╛ржЬрж╛рж░", "рж░рж╛ржЩрзНржЧрж╛ржорж╛ржЯрж┐", "ржЦрж╛ржЧрзЬрж╛ржЫрзЬрж┐", "ржмрж╛ржирзНржжрж░ржмрж╛ржи", "ржмрзНрж░рж╛рж╣рзНржоржгржмрж╛рзЬрж┐рзЯрж╛", "ржХрзБржорж┐рж▓рзНрж▓рж╛", "ржлрзЗржирзА",
                "ржирзЛрзЯрж╛ржЦрж╛рж▓рзА", "рж▓ржХрзНрж╖рзНржорзАржкрзБрж░", "ржЪрж╛ржБржжржкрзБрж░", "ржЪрж╛ржБржкрж╛ржЗржиржмрж╛ржмржЧржЮрзНржЬ", "рж░рж╛ржЬрж╢рж╛рж╣рзА", "ржирж╛ржЯрзЛрж░", "ржиржУржЧрж╛ржБ", "ржкрж╛ржмржирж╛",
                "рж╕рж┐рж░рж╛ржЬржЧржЮрзНржЬ", "ржмржЧрзБрзЬрж╛", "ржЬрзЯржкрзБрж░рж╣рж╛ржЯ", "ржжрж┐ржирж╛ржЬржкрзБрж░", "ржарж╛ржХрзБрж░ржЧрж╛ржБржУ", "ржкржЮрзНржЪржЧрзЬ", "рж░ржВржкрзБрж░", "ржХрзБрзЬрж┐ржЧрзНрж░рж╛ржо",
                "рж▓рж╛рж▓ржоржирж┐рж░рж╣рж╛ржЯ", "ржирзАрж▓ржлрж╛ржорж╛рж░рзА", "ржЧрж╛ржЗржмрж╛ржирзНржзрж╛", "рж╕рж┐рж▓рзЗржЯ", "ржорзМрж▓ржнрзАржмрж╛ржЬрж╛рж░", "рж╕рзБржирж╛ржоржЧржЮрзНржЬ", "рж╣ржмрж┐ржЧржЮрзНржЬ", "ржорж╛ржЧрзБрж░рж╛");
        ArrayAdapter<String> districtAdapter = new ArrayAdapter<>(this, R.layout.custom_spinner_district_item, R.id.spinner_text, districts);
        spinnerDistrict.setAdapter(districtAdapter);

        // Image picker button
        editIcon.setOnClickListener(v -> {
            ImagePicker.with(DonorRequest.this)
                    .crop(16f, 9f) // ЁЯУ╖ Cover ratio
                    .compress(512) // Compress to ~512 KB
                    .maxResultSize(1280, 720)
                    .start();
        });

        btnSubmit.setOnClickListener(v -> submitRequest());
    }

    @Override
    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
        super.onActivityResult(requestCode, resultCode, data);
        if (resultCode == RESULT_OK && data != null) {
            selectedImageUri = data.getData();
            if (selectedImageUri != null && profileImage != null) {
                profileImage.setImageURI(selectedImageUri);
            }
        } else if (resultCode == ImagePicker.RESULT_ERROR) {
            Toast.makeText(this, ImagePicker.getError(data), Toast.LENGTH_SHORT).show();
        }
    }


    private String encodeImageToBase64(Uri imageUri) {
        try {
            Bitmap bitmap = MediaStore.Images.Media.getBitmap(this.getContentResolver(), imageUri);
            ByteArrayOutputStream baos = new ByteArrayOutputStream();
            bitmap.compress(Bitmap.CompressFormat.JPEG, 80, baos);
            byte[] imageBytes = baos.toByteArray();
            return android.util.Base64.encodeToString(imageBytes, android.util.Base64.DEFAULT);
        } catch (IOException e) {
            e.printStackTrace();
            return null;
        }
    }

    private void submitRequest() {
        String name = editName.getText() != null ? editName.getText().toString().trim() : "";
        String phone = editPhone.getText() != null ? editPhone.getText().toString().trim() : "";
        String address = editAddress.getText() != null ? editAddress.getText().toString().trim() : "";
        String problem = editplm.getText() != null ? editplm.getText().toString().trim() : "";
        String bloodGroup = spinnerBloodGroup.getSelectedItem() != null ? spinnerBloodGroup.getSelectedItem().toString() : "";
        String district = spinnerDistrict.getSelectedItem() != null ? spinnerDistrict.getSelectedItem().toString() : "";

        if (name.isEmpty() || phone.isEmpty() || address.isEmpty() || problem.isEmpty() || selectedImageUri == null) {
            Toast.makeText(this, "рж╕ржм ржлрж┐рж▓рзНржб ржкрзВрж░ржг ржХрж░рзБржи ржУ ржЫржмрж┐ ржжрж┐ржи", Toast.LENGTH_SHORT).show();
            return;
        }

        String encodedImage = encodeImageToBase64(selectedImageUri);
        if (encodedImage == null) {
            Toast.makeText(this, "ржЫржмрж┐ ржПржиржХрзЛржб ржХрж░рждрзЗ рж╕ржорж╕рзНржпрж╛ рж╣ржпрж╝рзЗржЫрзЗ", Toast.LENGTH_SHORT).show();
            return;
        }

        String userId = sessionManager.getUserPhone();
        if (userId == null || userId.isEmpty()) {
            Toast.makeText(this, "ржмрзНржпржмрж╣рж╛рж░ржХрж╛рж░рзА рж╢ржирж╛ржХрзНржд ржХрж░рж╛ ржпрж╛ржпрж╝ржирж┐ред ржЕржирзБржЧрзНрж░рж╣ ржХрж░рзЗ ржкрзБржирж░рж╛рзЯ рж▓ржЧржЗржи ржХрж░рзБржиред", Toast.LENGTH_SHORT).show();
            return;
        }

        progressDialog.show();

        StringRequest stringRequest = new StringRequest(Request.Method.POST, Urls.ADD_DONORS_REQUEST,
                response -> {
                    if (progressDialog.isShowing()) progressDialog.dismiss();

                    try {
                        JSONObject json = new JSONObject(response);
                        if (json.optBoolean("success", false)) {

                            AlertDialog.Builder builder = new AlertDialog.Builder(this);
                            builder.setTitle("рж╕ржлрж▓");
                            builder.setMessage("рж░ржХрзНрждрзЗрж░ ржЕржирзБрж░рзЛржз рж╕ржлрж▓ржнрж╛ржмрзЗ ржкрж╛ржарж╛ржирзЛ рж╣ржпрж╝рзЗржЫрзЗ");
                            builder.setIcon(R.drawable.checkmark); // ржЖржкржирж╛рж░ drawable ржлрзЛрж▓рзНржбрж╛рж░рзЗ success ржЖржЗржХржи ржерж╛ржХрж▓рзЗ
                            builder.setPositiveButton("ржарж┐ржХ ржЖржЫрзЗ", (dialog, which) -> {
                                dialog.dismiss();
                                finish();  // рж░рж┐ржХрзЛрзЯрзЗрж╕рзНржЯ рж╕ржлрж▓ рж╣рж▓рзЗ ржПржЗ activity ржерзЗржХрзЗ ржмрзЗрж░ рж╣рзЯрзЗ ржпрж╛ржмрзЗ
                            });
                            builder.setCancelable(false);
                            builder.show();

                        } else {
                            Toast.makeText(this, json.optString("message", "ржЕржирзБрж░рзЛржз ржкрж╛ржарж╛рждрзЗ рж╕ржорж╕рзНржпрж╛ рж╣ржпрж╝рзЗржЫрзЗ"), Toast.LENGTH_SHORT).show();
                        }
                    } catch (JSONException e) {
                        e.printStackTrace();
                        Toast.makeText(this, "JSON ржкрж╛рж░рзНрж╕рж┐ржВ рждрзНрж░рзБржЯрж┐ рж╣ржпрж╝рзЗржЫрзЗ", Toast.LENGTH_SHORT).show();
                        Log.e("DonorRequest", "JSONException: " + e.getMessage());
                    }
                },
                error -> {
                    if (progressDialog.isShowing()) progressDialog.dismiss();

                    NetworkResponse networkResponse = error.networkResponse;
                    if (networkResponse != null) {
                        String body = new String(networkResponse.data, StandardCharsets.UTF_8);
                        Log.e("ServerError", "Status code: " + networkResponse.statusCode + ", Body: " + body);
                        Toast.makeText(this, "рж╕рж╛рж░рзНржнрж╛рж░ ржерзЗржХрзЗ рждрзНрж░рзБржЯрж┐ ржкрж╛ржУрзЯрж╛ ржЧрзЗржЫрзЗ: " + networkResponse.statusCode, Toast.LENGTH_LONG).show();
                    } else {
                        Log.e("ServerError", "No network response");
                        Toast.makeText(this, "ржирзЗржЯржУржпрж╝рж╛рж░рзНржХ рж╕ржорж╕рзНржпрж╛рж░ ржХрж╛рж░ржгрзЗ ржЕржирзБрж░рзЛржз ржкрж╛ржарж╛ржирзЛ ржпрж╛ржпрж╝ржирж┐", Toast.LENGTH_LONG).show();
                    }
                }
        ) {
            @Override
            protected Map<String, String> getParams() {
                Map<String, String> params = new HashMap<>();
                params.put("user_id", userId);
                params.put("name", name);
                params.put("phone", phone);
                params.put("blood_group", bloodGroup);
                params.put("district", district);
                params.put("address", address);
                params.put("problem", problem);
                params.put("image", encodedImage);
                return params;
            }
        };

        // Set retry policy (optional) - increases timeout to 30s to avoid timeout errors on slow networks
        stringRequest.setRetryPolicy(new com.android.volley.DefaultRetryPolicy(
                30000,
                com.android.volley.DefaultRetryPolicy.DEFAULT_MAX_RETRIES,
                com.android.volley.DefaultRetryPolicy.DEFAULT_BACKOFF_MULT));

        Volley.newRequestQueue(this).add(stringRequest);
    }
}
